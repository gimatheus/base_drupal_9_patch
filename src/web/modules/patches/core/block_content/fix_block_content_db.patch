diff --git a/core/modules/block_content/src/Plugin/Derivative/BlockContent.php b/core/modules/block_content/src/Plugin/Derivative/BlockContent.php
index caffc8d..678c232 100644
--- a/core/modules/block_content/src/Plugin/Derivative/BlockContent.php
+++ b/core/modules/block_content/src/Plugin/Derivative/BlockContent.php
@@ -3,6 +3,7 @@
 namespace Drupal\block_content\Plugin\Derivative;

 use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -12,6 +13,13 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  */
 class BlockContent extends DeriverBase implements ContainerDeriverInterface {

+  /**
+   * The database connection.
+   *
+   * @var \Drupal\Core\Database\Connection
+   */
+  protected $connection;
+
   /**
    * The custom block storage.
    *
@@ -22,10 +30,11 @@ class BlockContent extends DeriverBase implements ContainerDeriverInterface {
   /**
    * Constructs a BlockContent object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_content_storage
-   *   The custom block storage.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
    */
-  public function __construct(EntityStorageInterface $block_content_storage) {
+  public function __construct(Connection $connection, EntityStorageInterface $block_content_storage) {
+    $this->connection = $connection;
     $this->blockContentStorage = $block_content_storage;
   }

@@ -35,6 +44,7 @@ class BlockContent extends DeriverBase implements ContainerDeriverInterface {
   public static function create(ContainerInterface $container, $base_plugin_id) {
     $entity_type_manager = $container->get('entity_type.manager');
     return new static(
+      $container->get('database'),
       $entity_type_manager->getStorage('block_content')
     );
   }
@@ -43,16 +53,49 @@ class BlockContent extends DeriverBase implements ContainerDeriverInterface {
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    $block_contents = $this->blockContentStorage->loadByProperties(['reusable' => TRUE]);
-    // Reset the discovered definitions.
-    $this->derivatives = [];
-    /** @var $block_content \Drupal\block_content\Entity\BlockContent */
-    foreach ($block_contents as $block_content) {
-      $this->derivatives[$block_content->uuid()] = $base_plugin_definition;
-      $this->derivatives[$block_content->uuid()]['admin_label'] = $block_content->label();
-      $this->derivatives[$block_content->uuid()]['config_dependencies']['content'] = [
-        $block_content->getConfigDependencyName(),
-      ];
+    $request = \Drupal::request();
+    $is_ajax = $request->isXmlHttpRequest();
+    $uri = $request->getRequestUri();
+    $not_allowed_paths = ['/node/', '/entity_clone/', '/media/', '/block/'];
+    $i = 0;
+    $is_admin = false;
+    while (!$is_admin && $i < sizeof($not_allowed_paths)) {
+      if (strpos($uri, $not_allowed_paths[$i]) !== false) {
+        $is_admin = true;
+      }
+      $i++;
+    }
+    if (!is_admin) {
+      $admin_context = \Drupal::service('router.admin_context');
+      $is_admin = $admin_context->isAdminRoute();
+    }
+    if ($is_ajax && !$is_admin) {
+      $block_contents = $this->blockContentStorage->loadMultiple();
+      // Reset the discovered definitions.
+      $this->derivatives = [];
+      /** @var $block_content \Drupal\block_content\Entity\BlockContent */
+      foreach ($block_contents as $block_content) {
+        $this->derivatives[$block_content->uuid()] = $base_plugin_definition;
+        $this->derivatives[$block_content->uuid()]['admin_label'] = $block_content->label();
+        $this->derivatives[$block_content->uuid()]['config_dependencies']['content'] = [
+          $block_content->getConfigDependencyName(),
+        ];
+      }
+    } else {
+      $query = $this->connection->select('block_content', 'bc')->fields('bc');
+      $query->addJoin('left', 'block_content_field_revision', 'f', 'f.revision_id = bc.revision_id');
+      $query->fields('f');
+      $results = $query->execute();
+      // Reset the discovered definitions.
+      $this->derivatives = [];
+      /** @var $block_content \Drupal\block_content\Entity\BlockContent */
+      foreach ($results as $block_content) {
+        $this->derivatives[$block_content->uuid] = $base_plugin_definition;
+        $this->derivatives[$block_content->uuid]['admin_label'] = $block_content->info;
+        $this->derivatives[$block_content->uuid]['config_dependencies']['content'] = [
+          "block_content:{$block_content->uuid}:{$block_content->type}",
+        ];
+      }
     }
     return parent::getDerivativeDefinitions($base_plugin_definition);
   }
